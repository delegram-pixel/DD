// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  title     String?
  date      DateTime @default(now())
  filename  String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Add relation to User
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("photos")
}

model Writing {
  id          String   @id @default(cuid())
  title       String
  category    String
  description String   @db.Text
  image       String
  tags        String[]
  contentUrl  String   // URL to the content file on Uploadcare
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Add relation to User
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("writings")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  title     String?
  bio       String?
  image     String?
  location  String?
  website   String?
  
  // Social media
  twitterHandle    String?
  instagramHandle  String?
  facebookHandle   String?
  
  // About section
  education    String?
  experience   String?
  interests    String?
  
  // Stats
  writingsCount  Int @default(0)
  photosCount    Int @default(0)
  followersCount Int @default(0)
  
  // Related models
  awards        Award[]
  publications  Publication[]
  recognitions  Recognition[]
  
  // Add relations to Writing and Photo
  writings      Writing[]
  photos        Photo[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Award {
  id          String @id @default(cuid())
  description String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Publication {
  id          String @id @default(cuid())
  title       String
  description String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Recognition {
  id          String @id @default(cuid())
  description String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}